{
  "name": "lines-adapter",
  "description": "Line-oriented Evented I/O",
  "version": "0.0.5",
  "author": {
    "name": "Jon Seymour",
    "email": "jon.seymour@gmail.com"
  },
  "main": "lib/lines-adapter",
  "homepage": "https://github.com/jonseymour/node-lines-adapter",
  "repository": {
    "type": "git",
    "url": "https://github.com/jonseymour/node-lines-adapter"
  },
  "directories": {
    "lib": "lib"
  },
  "dependencies": {
    "lazy": "*"
  },
  "engines": {
    "node": "*"
  },
  "readme": "NAME\n====\nlines-adapter - an evented, line-oriented I/O library for node.js\n\nSYNOPSIS\n========\n\n        var lines=require(\"lines-adapter\");\n\n        lines(stream, 'utf8')\n        .on('data',\n           function(line) {\n                 // invoked for each line of input\n           }\n        )\n        .end('end',\n           function() {\n                 // invoked at the end of stream\n           }\n         );\n\nDESCRIPTION\n===========\nAdapts a readable buffer stream to produce a stream of lines.\n\nlines(stream,encoding)\n----------------------\nThe lines-adapter module is a function which constructs a line stream from a buffer stream and an optional\nencoding argument. The supported encodings are those supported by Buffer.toString(). If no encoding is\nspecified, 'utf8' is assumed.\n\nEvent: 'data'\n-------------\nThe 'data' event emits a string for each line of input in the adapted byte stream. The emitted\nline does not contain a trailing \\\\n.\n\nEvent: 'end'\n------------\nEmitted when the stream has received an EOF. Indicates that no more 'data' events will happen.\n\nOther functions of the underlying stream not implemented by the adapter itself are proxied to\nthe implementations provided by the stream.\n\nINSTALLATION\n============\n        npm install lines-adapter\n\nEXAMPLES\n========\nexample/example.js contains the following example:\n\n        var\n        lines=require(\"lines-adapter\");\n\n        (function() {\n\t    var count=0;\n            lines(process.stdin)\n            .on('data',\n                function (line) {\n                     count++;\n                     console.log(line);\n                })\n            .on('end',\n                function() {\n                     console.warn(count+\" lines copied\");\n                });\n        })();\n\n        process.stdin.resume();\n\nwhich can be invoked like this:\n\n        npm explore lines-adapter\n        (echo foo; echo bar) | node example/example.js\n        exit  # to return to where you were\n\n\nSIMILAR PACKAGES\n================\nFloby's [node-lines](https://github.com/Floby/node-lines) package provides similar functionality to this\nlibrary although it has a different philosophy. In particular node-lines emits 'line' events whereas\nnode-lines-adapter emits 'data' events.\n\nPeteris Krumin's [node-lazy](https://github.com/pkrumins/node-lazy) provides an alternative\nsolution that offers a different, more functional abstraction - that of a lazy list.\n\nFor example:\n\n         var Lazy=require(\"lazy\");\n\n         (function() {\n            var count=0;\n            new Lazy(process.stdin)\n                 .on('end', function() { console.warn(count + \" lines processed\"); })\n                 .lines\n                 .forEach(\n                    function(buffer)\n                    {\n                        count++;\n                        console.log(buffer.toString());\n                    );\n         })();\n\n         process.stdin.resume();\n\nIn fact, lines-adapter currently uses node-lazy as its implementation.\n\nThe node-lazy API is probably a better solution to use if you don't actually need a stream-like\ninterface, but just need some way to extract lines from an input stream. The reason is that provides\na very concise way to construct processing pipelines.\n\nThe lines-adapter API itself is suited to cases where you need a stream-like interface in which\nthe 'data' events are constrained to be single strings, corresponding to each line of input.\n\nREVISION HISTORY\n================\nv0.0.5\n        Resurrected. There is actually some value in presenting a stream-like interface, even if\n        node-lazy is probably better suited to most purposes.\n\nv0.0.4\n        Re-implemented in terms of node-lazy.\n\nv0.0.3\n        last version that does not generate deprecation warnings.\n",
  "readmeFilename": "README.md",
  "_id": "lines-adapter@0.0.5",
  "dist": {
    "shasum": "3d1922f4886d7c1056dd0ea558dec1790ef228aa"
  },
  "_from": "lines-adapter@",
  "_resolved": "https://registry.npmjs.org/lines-adapter/-/lines-adapter-0.0.5.tgz"
}
